name: Deploy

on:
  workflow_call:
    inputs:
      app-version:
        required: true
        type: string
      distribution-channel:
        required: true
        type: string

permissions:
  contents: write

defaults:
  run:
    shell: 'bash'

env:
  NODE_NO_WARNINGS: 1
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  npm_config_audit: false
  npm_config_fund: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{inputs.distribution-channel}}
      url: https://github.com/${{github.repository}}/releases/tag/v${{inputs.app-version}}
    steps:
      - name: Download compiled app
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{inputs.distribution-channel}}"
          path: dist
          merge-multiple: true

      - name: List downloaded files
        run: |
          echo "Contents of dist directory:"
          find dist -type f -name "*" 2>/dev/null | head -20 || true
          echo "Total files: $(find dist -type f 2>/dev/null | wc -l)"

      - name: Create release with available files
        run: |
          # Find main installer files (exclude unpacked directories and blockmap files)
          ROOT_FILES=$(find dist -maxdepth 1 -name "root*.exe" -o -name "root*.dmg" -o -name "root*.deb" -o -name "root*.AppImage" 2>/dev/null || true)
          LATEST_FILES=$(find dist -maxdepth 1 -name "latest*.yml" 2>/dev/null || true)

          echo "Found installer files:"
          echo "$ROOT_FILES"
          echo "Found update files:"
          echo "$LATEST_FILES"

          # Combine files to upload
          FILES_TO_UPLOAD=""
          if [ -n "$ROOT_FILES" ]; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD $ROOT_FILES"
          fi
          if [ -n "$LATEST_FILES" ]; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD $LATEST_FILES"
          fi

          # Remove leading/trailing spaces
          FILES_TO_UPLOAD=$(echo $FILES_TO_UPLOAD | xargs)

          echo "Final files to upload: $FILES_TO_UPLOAD"

          if [ -n "$FILES_TO_UPLOAD" ]; then
            gh release create v${{inputs.app-version}} $FILES_TO_UPLOAD \
              --repo ${{github.repository}} \
              --title "Electron RPA v${{inputs.app-version}}" \
              --notes "üöÄ Electron RPA Ëá™Âä®ÂèëÂ∏É - ÊûÑÂª∫‰∫é $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          else
            echo "‚ùå No installer files found to upload"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}
